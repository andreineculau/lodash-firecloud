{"version":3,"sources":["../../src/mixins-browser/event-source.ts"],"names":[],"mappings":"yIAAA;AACA,oE;;;;AAIO,MAAM,sBAAN,SAA8C,oBAAW,WAAzD,CAAwE;;;AAG/E;;;AAGO,MAAM,WAAN,CAAkB;AACZ,IAAA,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CADY;;AAGV,MAHU;;AAKvB,EAAA,iBAAiB,CAAC,IAAD,EAAe,QAAf,EAA8C,OAA9C,EAAuF;AACtG,oBAAE,QAAF,CAAW,OAAX,EAAoB;AAClB,MAAA,OAAO,EAAE,IADS;AAElB,MAAA,OAAO,EAAE,IAFS,EAApB;;AAIA,QAAI,aAAa,GAAG;AAClB,IAAA,KADkB;AAEZ;AACN,UAAI,KAAK,YAAY,sBAArB,EAA6C;AAC3C,QAAA,KAAK,GAAG,KAAK,CAAC,MAAd;AACD;;AAED,MAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KARD;;AAUA,SAAK,UAAL,CAAgB,IAAhB,CAAqB;AACnB,MAAA,IADmB;AAEnB,MAAA,QAFmB;AAGnB,MAAA,OAHmB;AAInB,MAAA,aAJmB,EAArB;;AAMA,SAAK,QAAL,CAAc,gBAAd,CAA+B,IAA/B,EAAqC,aAArC,EAAoD,OAApD;AACD;;AAED,EAAA,oBAAoB,CAAC,IAAD,EAAe,QAAf,EAA8C,OAA9C,EAAuF;AACzG,oBAAE,QAAF,CAAW,OAAX,EAAoB;AAClB,MAAA,OAAO,EAAE,IADS;AAElB,MAAA,OAAO,EAAE,IAFS,EAApB;;;AAKA,QAAI,gBAAgB,GAAG,gBAAE,IAAF,CAAO,KAAK,UAAZ,EAAwB;AAC7C,MAAA,IAD6C;AAE7C,MAAA,QAF6C;AAG7C,MAAA,OAH6C,EAAxB,CAAvB;;;AAMA,QAAI,gBAAE,WAAF,CAAc,gBAAd,CAAJ,EAAqC;AACnC;AACD;;AAED,QAAI;AACF,MAAA,aADE;AAEA,IAAA,gBAFJ;;AAIA;AACA,oBAAE,IAAF,CAAO,KAAK,UAAZ,EAAwB,gBAAxB;AACA,SAAK,QAAL,CAAc,mBAAd,CAAkC,IAAlC,EAAwC,aAAxC,EAAuD,OAAvD;AACD;;AAED;;;AAGA,EAAA,EAAE,CAAC,IAAD,EAAe,QAAf,EAAoD;AACpD,SAAK,iBAAL,CAAuB,IAAvB,EAA6B,QAA7B;AACD;;AAED;;;AAGA,EAAA,IAAI,CAAC,IAAD,EAAe,QAAf,EAAoD;AACtD,QAAI,OAAO,GAAG;AACZ,MAAA,IAAI,EAAE,IADM,EAAd;;;AAIA,SAAK,iBAAL,CAAuB,IAAvB,EAA6B,QAA7B,EAAuC,OAAvC;AACD;;AAED;;;AAGA,EAAA,GAAG,CAAC,IAAD,EAAe,QAAf,EAAoD;AACrD,SAAK,oBAAL,CAA0B,IAA1B,EAAgC,QAAhC;AACD;;AAED;;;AAGA,EAAA,IAAI,CAAC,WAAD,EAA8B,MAA9B,EAA8E;AAChF,QAAI,KAAJ;;AAEA,QAAI,WAAW,YAAY,KAA3B,EAAkC;AAChC,MAAA,KAAK,GAAG,WAAR;AACD,KAFD,MAEO;AACL,MAAA,KAAK,GAAG,IAAI,sBAAJ,CAA2B,WAA3B,EAAwC;AAC9C,QAAA,MAD8C,EAAxC,CAAR;;AAGD;;AAED,SAAK,QAAL,CAAc,aAAd,CAA4B,KAA5B;AACD,GA9FsB,C","file":"event-source.js","sourcesContent":["import _ from 'lodash';\nimport globalThis from './.global-this';\n\nexport type EventSourceListener = (eventDetail: EventSourceCustomEvent['detail']) => void;\n\nexport class EventSourceCustomEvent<T = any> extends globalThis.CustomEvent<T> {\n}\n\n/**\n * EventSource implements a core subset of an EventEmitter for the browser runtime.\n */\nexport class EventSource {\n  _element = document.createElement('div');\n\n  _listeners = [];\n\n  _addEventListener(type: string, listener: EventSourceListener, options?: AddEventListenerOptions): void {\n    _.defaults(options, {\n      capture: true,\n      passive: true\n    });\n    let listenerProxy = function(\n      event: EventSourceCustomEvent | EventSourceCustomEvent['detail']\n    ): void {\n      if (event instanceof EventSourceCustomEvent) {\n        event = event.detail;\n      }\n\n      listener(event);\n    };\n\n    this._listeners.push({\n      type,\n      listener,\n      options,\n      listenerProxy\n    });\n    this._element.addEventListener(type, listenerProxy, options);\n  }\n\n  _removeEventListener(type: string, listener: EventSourceListener, options?: AddEventListenerOptions): void {\n    _.defaults(options, {\n      capture: true,\n      passive: true\n    });\n\n    let existingListener = _.find(this._listeners, {\n      type,\n      listener,\n      options\n    });\n\n    if (_.isUndefined(existingListener)) {\n      return;\n    }\n\n    let {\n      listenerProxy\n    } = existingListener;\n\n    // eslint-disable-next-line lodash/prefer-immutable-method\n    _.pull(this._listeners, existingListener);\n    this._element.removeEventListener(type, listenerProxy, options);\n  }\n\n  /**\n   * Add a listener for a specific event type.\n   */\n  on(type: string, listener: EventSourceListener): void {\n    this._addEventListener(type, listener);\n  }\n\n  /**\n   * Add a listener for a specific event type, that will only be called once.\n   */\n  once(type: string, listener: EventSourceListener): void {\n    let options = {\n      once: true\n    };\n\n    this._addEventListener(type, listener, options);\n  }\n\n  /**\n   * Remove a listener for a specific event type.\n   */\n  off(type: string, listener: EventSourceListener): void {\n    this._removeEventListener(type, listener);\n  }\n\n  /**\n   * Emit an event and call relevant listeners.\n   */\n  emit(eventOrType: string | Event, detail: EventSourceCustomEvent['detail']): void {\n    let event: Event;\n\n    if (eventOrType instanceof Event) {\n      event = eventOrType;\n    } else {\n      event = new EventSourceCustomEvent(eventOrType, {\n        detail\n      });\n    }\n\n    this._element.dispatchEvent(event);\n  }\n}\n"]}