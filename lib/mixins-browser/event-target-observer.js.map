{"version":3,"sources":["../../src/mixins-browser/event-target-observer.ts"],"names":[],"mappings":"gHAAA,wD;;AAEO,MAAM,mBAAN,CAA0B;;;;;AAK/B,EAAA,WAAW,CAAC,EAAD,EAAK,8BAJV,SAIU,kCAFP,EAEO;AACd,SAAK,GAAL,GAAW,EAAX;AACD;;AAED,EAAA,OAAO,CAAC;AACN,IAAA,MADM;AAEN,IAAA,IAFM,EAAD;;;;AAMJ,EAAA,OAAgC,GAAG,EAN/B,EAMyC;AAC9C,QAAI,UAAU,GAAG,gBAAE,IAAF,CAAO,KAAK,MAAZ,EAAoB;AACnC,MAAA,MADmC;AAEnC,MAAA,IAFmC;AAGnC,MAAA,OAAO,EAAE,OAAO,CAAC,OAHkB,EAApB,CAAjB;;AAKA,QAAI,WAAW,GAAG,CAAC,gBAAE,WAAF,CAAc,UAAd,CAAnB;AACA,QAAI,WAAJ,EAAiB;AACf;AACD;AACD,QAAI,QAAQ,GAAI,CAAD,IAAa;AAC1B,UAAI,OAAO,GAAG;AACZ,MAAA,CADY,CAAd;;AAGA,WAAK,GAAL,CAAS,OAAT;AACD,KALD;AAMA,SAAK,MAAL,CAAY,IAAZ,CAAiB;AACf,MAAA,MADe;AAEf,MAAA,IAFe;AAGf,MAAA,OAAO,EAAE,OAAO,CAAC,OAHF,EAAjB;;AAKA,IAAA,MAAM,CAAC,gBAAP,CAAwB,IAAxB,EAA8B,QAA9B,EAAwC,OAAxC;AACD;;AAED,EAAA,SAAS,CAAC;AACR,IAAA,MADQ;AAER,IAAA,IAFQ,EAAD;;;;AAMN,EAAA,OAA6B,GAAG,EAN1B,EAMoC;AAC3C,QAAI,UAAU,GAAG,gBAAE,IAAF,CAAO,KAAK,MAAZ,EAAoB;AACnC,MAAA,MADmC;AAEnC,MAAA,IAFmC;AAGnC,MAAA,OAAO,EAAE,OAAO,CAAC,OAHkB,EAApB,CAAjB;;AAKA,QAAI,WAAW,GAAG,CAAC,gBAAE,WAAF,CAAc,UAAd,CAAnB;AACA,QAAI,CAAC,WAAL,EAAkB;AAChB;AACD;AACD,IAAA,MAAM,CAAC,mBAAP,CAA2B,IAA3B,EAAiC,UAAU,CAAC,QAA5C,EAAsD,OAAtD;AACA;AACA,oBAAE,IAAF,CAAO,KAAK,MAAZ,EAAoB,UAApB;AACD;;AAED,EAAA,UAAU,GAAS;AACjB,oBAAE,OAAF,CAAU,KAAK,MAAf,EAAuB,CAAC;AACtB,MAAA,MADsB;AAEtB,MAAA,IAFsB;AAGtB,MAAA,OAHsB,EAAD;AAIjB;AACJ,WAAK,SAAL,CAAe;AACb,QAAA,IADa;AAEb,QAAA,MAFa,EAAf;AAGG;AACD,QAAA,OADC,EAHH;;AAMD,KAXD;AAYD,GAzE8B,C","file":"event-target-observer.js","sourcesContent":["import _ from 'lodash';\n\nexport class EventTargetObserver {\n  _cb = undefined;\n\n  _cache = [];\n\n  constructor(cb) {\n    this._cb = cb;\n  }\n\n  observe({\n    target,\n    type\n  }: {\n    target: Node,\n    type: string\n  }, options: AddEventListenerOptions = {}): void {\n    let cacheEntry = _.find(this._cache, {\n      target,\n      type,\n      capture: options.capture\n    });\n    let isObserving = !_.isUndefined(cacheEntry);\n    if (isObserving) {\n      return;\n    }\n    let listener = (e): void => {\n      let entries = [\n        e\n      ];\n      this._cb(entries);\n    };\n    this._cache.push({\n      target,\n      type,\n      capture: options.capture\n    });\n    target.addEventListener(type, listener, options);\n  }\n\n  unobserve({\n    target,\n    type\n  }: {\n    target: Node,\n    type: string\n  }, options: EventListenerOptions = {}): void {\n    let cacheEntry = _.find(this._cache, {\n      target,\n      type,\n      capture: options.capture\n    });\n    let isObserving = !_.isUndefined(cacheEntry);\n    if (!isObserving) {\n      return;\n    }\n    target.removeEventListener(type, cacheEntry.listener, options);\n    // eslint-disable-next-line lodash/prefer-immutable-method\n    _.pull(this._cache, cacheEntry);\n  }\n\n  disconnect(): void {\n    _.forEach(this._cache, ({\n      target,\n      type,\n      capture\n    }) => {\n      this.unobserve({\n        type,\n        target\n      }, {\n        capture\n      });\n    });\n  }\n}\n"]}