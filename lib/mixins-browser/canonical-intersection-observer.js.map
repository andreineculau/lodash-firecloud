{"version":3,"sources":["../../src/mixins-browser/canonical-intersection-observer.ts"],"names":[],"mappings":"0HAAA;AACA,oE;;AAEO,MAAM,6BAAN,CAAoC;;;;;;;;;AASzC,EAAA,WAAW,CAAC,EAAD,EAAK,8BARV,SAQU,0CAFV,EAEU;AACd,SAAK,GAAL,GAAW,EAAX;AACD;;AAED,EAAA,OAAO,CAAC,OAAD,EAAmB,OAAnB,EAA4D;AACjE,QAAI,gBAAgB,GAAG,gBAAE,IAAF,CAAO,KAAK,cAAZ,EAA4B;AACjD,MAAA,OADiD;AAEjD,MAAA,OAFiD,EAA5B,CAAvB;;AAIA,QAAI,gBAAJ,EAAsB;AACpB;AACD;;AAED,QAAI,YAAY,GAAG,gBAAE,IAAF,CAAO,KAAK,cAAZ,EAA4B;AAC7C,MAAA,OAD6C,EAA5B,CAAnB;;AAGA,QAAI,QAAJ;AACA,QAAI,gBAAE,WAAF,CAAc,YAAd,CAAJ,EAAiC;AAC/B,MAAA,QAAQ,GAAG,IAAI,oBAAW,oBAAf,CAAqC,OAAD,IAAa;AAC1D,aAAK,GAAL,CAAS,OAAT,EAAkB,IAAlB;AACD,OAFU,EAER,OAFQ,CAAX;AAGD,KAJD,MAIO;AACL,OAAC;AACC,QAAA,QADD;AAEG,MAAA,YAFJ;AAGD;;AAED,IAAA,QAAQ,CAAC,OAAT,CAAiB,OAAjB;AACA,SAAK,cAAL,CAAoB,IAApB,CAAyB;AACvB,MAAA,OADuB;AAEvB,MAAA,OAFuB;AAGvB,MAAA,QAHuB,EAAzB;;AAKD;;AAED,EAAA,SAAS,CAAC,OAAD,EAAmB,OAAnB,EAA4D;AACnE,QAAI,aAAa,GAAG,gBAAE,MAAF,CAAS,KAAK,cAAd,EAA8B;AAChD,MAAA,OADgD;AAEhD,MAAA,OAFgD,EAA9B,CAApB;;;AAKA,oBAAE,OAAF,CAAU,aAAV,EAAyB,UAAS,EAAC,OAAD,EAAU,QAAV,EAAT,EAA8B;AACrD,MAAA,QAAQ,CAAC,SAAT,CAAmB,OAAnB;AACD,KAFD;;AAIA;AACA,oBAAE,MAAF,CAAS,KAAK,cAAd,EAA8B;AAC5B,MAAA,OAD4B;AAE5B,MAAA,OAF4B,EAA9B;;AAID;;AAED,EAAA,UAAU,GAAS;AACjB,QAAI,SAAS,GAAG,gBAAE,GAAF,CAAM,KAAK,cAAX,EAA2B,UAAS,YAAT,EAAuB;AAChE,aAAO,YAAY,CAAC,QAApB;AACD,KAFe,CAAhB;AAGA,IAAA,SAAS,GAAG,gBAAE,IAAF,CAAO,SAAP,CAAZ;AACA,oBAAE,OAAF,CAAU,SAAV,EAAqB,UAAS,QAAT,EAAmB;AACtC,MAAA,QAAQ,CAAC,UAAT;AACD,KAFD;AAGA,SAAK,cAAL,GAAsB,EAAtB;AACD,GAtEwC,C","file":"canonical-intersection-observer.js","sourcesContent":["import _ from 'lodash';\nimport globalThis from './.global-this';\n\nexport class CanonicalIntersectionObserver {\n  _cb = undefined;\n\n  _observerPairs: {\n    element: Element;\n    options: IntersectionObserverInit;\n    observer: IntersectionObserver;\n  }[] = [];\n\n  constructor(cb) {\n    this._cb = cb;\n  }\n\n  observe(element: Element, options: IntersectionObserverInit): void {\n    let alreadyObserving = _.some(this._observerPairs, {\n      element,\n      options\n    });\n    if (alreadyObserving) {\n      return;\n    }\n\n    let observerPair = _.find(this._observerPairs, {\n      options\n    });\n    let observer: IntersectionObserver;\n    if (_.isUndefined(observerPair)) {\n      observer = new globalThis.IntersectionObserver((entries) => {\n        this._cb(entries, this);\n      }, options);\n    } else {\n      ({\n        observer\n      } = observerPair);\n    }\n\n    observer.observe(element);\n    this._observerPairs.push({\n      element,\n      options,\n      observer\n    });\n  }\n\n  unobserve(element: Element, options: IntersectionObserverInit): void {\n    let observerPairs = _.filter(this._observerPairs, {\n      element,\n      options\n    });\n\n    _.forEach(observerPairs, function({element, observer}) {\n      observer.unobserve(element);\n    });\n\n    // eslint-disable-next-line lodash/prefer-immutable-method\n    _.remove(this._observerPairs, {\n      element,\n      options\n    });\n  }\n\n  disconnect(): void {\n    let observers = _.map(this._observerPairs, function(observerPair) {\n      return observerPair.observer;\n    });\n    observers = _.uniq(observers);\n    _.forEach(observers, function(observer) {\n      observer.disconnect();\n    });\n    this._observerPairs = [];\n  }\n}\n"]}