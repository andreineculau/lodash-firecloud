{"version":3,"sources":["../../src/mixins-browser/canonical-intersection-observer.ts"],"names":[],"mappings":"0HAAA;AACA,oE;;;;;;;AAOO,MAAM,6BAAN,CAA6D;;;;;;;;;AASlE,EAAA,WAAW,CAAC,EAAD,EAA8B,8BARnC,SAQmC,kCANhC,EAMgC;AACvC,SAAK,GAAL,GAAW,EAAX;AACD;;AAED,EAAA,OAAO,CAAC,OAAD,EAAmB,OAAnB,EAA4D;AACjE,QAAI,gBAAgB,GAAG,gBAAE,IAAF,CAAO,KAAK,MAAZ,EAAoB,UAAS,UAAT,EAAqB;AAC9D,aAAO,UAAU,CAAC,OAAX,KAAuB,OAAvB,IAAkC,UAAU,CAAC,OAAX,KAAuB,OAAhE;AACD,KAFsB,CAAvB;AAGA,QAAI,gBAAJ,EAAsB;AACpB;AACD;;AAED,QAAI,UAAU,GAAG,gBAAE,IAAF,CAAO,KAAK,MAAZ,EAAoB,UAAS,UAAT,EAAqB;AACxD,aAAO,UAAU,CAAC,OAAX,KAAuB,OAA9B;AACD,KAFgB,CAAjB;AAGA,QAAI,QAAJ;AACA,QAAI,gBAAE,WAAF,CAAc,UAAd,CAAJ,EAA+B;AAC7B,MAAA,QAAQ,GAAG,IAAI,oBAAW,oBAAf,CAAqC,OAAD,IAAa;AAC1D,aAAK,GAAL,CAAS,OAAT,EAAkB,IAAlB;AACD,OAFU,EAER,OAFQ,CAAX;AAGD,KAJD,MAIO;AACL,OAAC;AACC,QAAA,QADD;AAEG,MAAA,UAFJ;AAGD;;AAED,IAAA,QAAQ,CAAC,OAAT,CAAiB,OAAjB;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB;AACf,MAAA,OADe;AAEf,MAAA,OAFe;AAGf,MAAA,QAHe,EAAjB;;AAKD;;AAED,EAAA,SAAS,CAAC,OAAD,EAAmB,OAAnB,EAA4D;AACnE,QAAI,KAAK,GAAG,gBAAE,MAAF,CAAS,KAAK,MAAd,EAAsB,UAAS,UAAT,EAAqB;AACrD,aAAO,UAAU,CAAC,OAAX,KAAuB,OAAvB,IAAkC,UAAU,CAAC,OAAX,KAAuB,OAAhE;AACD,KAFW,CAAZ;;AAIA,oBAAE,OAAF,CAAU,KAAV,EAAiB,UAAS,EAAC,OAAD,EAAU,QAAV,EAAT,EAA8B;AAC7C,MAAA,QAAQ,CAAC,SAAT,CAAmB,OAAnB;AACD,KAFD;;AAIA;AACA,oBAAE,MAAF,CAAS,KAAK,MAAd,EAAsB,UAAS,UAAT,EAAqB;AACzC,aAAO,UAAU,CAAC,OAAX,KAAuB,OAAvB,IAAkC,UAAU,CAAC,OAAX,KAAuB,OAAhE;AACD,KAFD;AAGD;;AAED,EAAA,UAAU,GAAS;AACjB,QAAI,SAAS,GAAG,gBAAE,GAAF,CAAM,KAAK,MAAX,EAAmB,UAAS,UAAT,EAAqB;AACtD,aAAO,UAAU,CAAC,QAAlB;AACD,KAFe,CAAhB;AAGA,IAAA,SAAS,GAAG,gBAAE,IAAF,CAAO,SAAP,CAAZ;AACA,oBAAE,OAAF,CAAU,SAAV,EAAqB,UAAS,QAAT,EAAmB;AACtC,MAAA,QAAQ,CAAC,UAAT;AACD,KAFD;AAGA,SAAK,MAAL,GAAc,EAAd;AACD,GAnEiE,C","file":"canonical-intersection-observer.js","sourcesContent":["import _ from 'lodash';\nimport globalThis from './.global-this';\n\nimport {\n  ReuseObserver,\n  ReuseObserverCallbackFn\n} from './reuse-observer';\n\nexport class CanonicalIntersectionObserver implements ReuseObserver {\n  _cb = undefined;\n\n  _cache = [] as {\n    element: Element;\n    options: IntersectionObserverInit;\n    observer: IntersectionObserver;\n  }[];\n\n  constructor(cb: ReuseObserverCallbackFn) {\n    this._cb = cb;\n  }\n\n  observe(element: Element, options: IntersectionObserverInit): void {\n    let alreadyObserving = _.some(this._cache, function(cacheEntry) {\n      return cacheEntry.element === element && cacheEntry.options === options;\n    });\n    if (alreadyObserving) {\n      return;\n    }\n\n    let cacheEntry = _.find(this._cache, function(cacheEntry) {\n      return cacheEntry.options === options;\n    });\n    let observer: IntersectionObserver;\n    if (_.isUndefined(cacheEntry)) {\n      observer = new globalThis.IntersectionObserver((entries) => {\n        this._cb(entries, this);\n      }, options);\n    } else {\n      ({\n        observer\n      } = cacheEntry);\n    }\n\n    observer.observe(element);\n    this._cache.push({\n      element,\n      options,\n      observer\n    });\n  }\n\n  unobserve(element: Element, options: IntersectionObserverInit): void {\n    let cache = _.filter(this._cache, function(cacheEntry) {\n      return cacheEntry.element === element && cacheEntry.options === options;\n    });\n\n    _.forEach(cache, function({element, observer}) {\n      observer.unobserve(element);\n    });\n\n    // eslint-disable-next-line lodash/prefer-immutable-method\n    _.remove(this._cache, function(cacheEntry) {\n      return cacheEntry.element === element && cacheEntry.options === options;\n    });\n  }\n\n  disconnect(): void {\n    let observers = _.map(this._cache, function(cacheEntry) {\n      return cacheEntry.observer;\n    });\n    observers = _.uniq(observers);\n    _.forEach(observers, function(observer) {\n      observer.disconnect();\n    });\n    this._cache = [];\n  }\n}\n"]}