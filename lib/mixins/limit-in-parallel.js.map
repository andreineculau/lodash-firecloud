{"version":3,"sources":["../../src/mixins/limit-in-parallel.js"],"names":[],"mappings":"qIAAA;;AAEA;AACA,IAAI,aAAa,GAAG,MAAM,CAAC,cAAP,CAAsB,kBAAiB,CAAE,UAAY,CAArD,EAAuD,WAA3E,C;;AAEA,MAAM,oBAAN,SAAmC,KAAnC,CAAyC;;;AAGlC,IAAI,eAAe,GAAG,UAAS,EAAT,EAAa,OAAO,GAAG,EAAvB,EAA2B;AACtD;AACA,MAAI,CAAC,GAAG,IAAR;;AAEA,EAAA,OAAO,GAAG,CAAC,CAAC,QAAF,CAAW,OAAX,EAAoB;AAC5B,IAAA,KAAK,EAAE,CADqB;AAE5B,IAAA,QAAQ,EAAE,KAFkB,EAApB,CAAV;;;AAKA,MAAI,WAAW,GAAG,CAAlB;;AAEA;AACA,MAAI,EAAE,iCAAN,EAAiC;AAC/B,QAAI,MAAM,GAAG,kBAAiB;AAC5B,UAAI,WAAW,IAAI,OAAO,CAAC,KAA3B,EAAkC;AAChC,YAAI,GAAG,GAAG,IAAI,oBAAJ,CAA0B,sCAAqC,OAAO,CAAC,KAAM,qBAA7E,CAAV;AACA,YAAI,OAAO,CAAC,QAAZ,EAAsB;AACpB,gBAAM,GAAN;AACD;AACD,eAAO,GAAP;AACD;AACD,MAAA,WAAW,GAAG,WAAW,GAAG,CAA5B;;AAEA,UAAI,MAAJ;AACA,UAAI,GAAJ;AACA,UAAI;AACF,QAAA,MAAM,4CAAG,MAAM,EAAE,EAAX,4IAAN;AACD,OAFD,CAEE,OAAO,IAAP,EAAa;AACb,QAAA,GAAG,GAAG,IAAN;AACD,OAJD,SAIU;AACR,QAAA,WAAW,GAAG,WAAW,GAAG,CAA5B;AACD;;AAED,UAAI,GAAJ,EAAS;AACP,cAAM,GAAN;AACD;AACD,aAAO,MAAP;AACD,KAxBD;AAyBA,WAAO,MAAP;AACD;;AAED,MAAI,MAAM,GAAG,YAAW;AACtB,QAAI,WAAW,IAAI,OAAO,CAAC,KAA3B,EAAkC;AAChC,UAAI,GAAG,GAAG,IAAI,oBAAJ,CAA0B,sCAAqC,OAAO,CAAC,KAAM,qBAA7E,CAAV;AACA,UAAI,OAAO,CAAC,QAAZ,EAAsB;AACpB,cAAM,GAAN;AACD;AACD,aAAO,GAAP;AACD;AACD,IAAA,WAAW,GAAG,WAAW,GAAG,CAA5B;;AAEA,QAAI,MAAJ;AACA,QAAI,GAAJ;AACA,QAAI;AACF,MAAA,MAAM,GAAG,EAAE,EAAX;AACD,KAFD,CAEE,OAAO,IAAP,EAAa;AACb,MAAA,GAAG,GAAG,IAAN;AACD,KAJD,SAIU;AACR,MAAA,WAAW,GAAG,WAAW,GAAG,CAA5B;AACD;;AAED,QAAI,GAAJ,EAAS;AACP,YAAM,GAAN;AACD;AACD,WAAO,MAAP;AACD,GAxBD;AAyBA,SAAO,MAAP;AACD,CAnEM;;AAqEP;0CACA,wBAAgB,KAAhB,GAAwB,oBAAxB","file":"limit-in-parallel.js","sourcesContent":["// TODO is there a way not to duplicate the function just because fn is sync or async?\n\n// eslint-disable-next-line firecloud/underscore-prefix-non-exported\nlet AsyncFunction = Object.getPrototypeOf(async function() { /* noop */ }).constructor;\n\nclass LimitInParallelError extends Error {\n}\n\nexport let limitInParallel = function(fn, options = {}) {\n  // eslint-disable-next-line consistent-this, babel/no-invalid-this\n  let _ = this;\n\n  options = _.defaults(options, {\n    limit: 1,\n    throwErr: false\n  });\n\n  let activeCount = 0;\n\n  // eslint-disable-next-line no-undef\n  if (fn instanceof AsyncFunction) {\n    let maxFun = async function() {\n      if (activeCount >= options.limit) {\n        let err = new LimitInParallelError(`Can only run this function maximum ${options.limit} times in parallel.`);\n        if (options.throwErr) {\n          throw err;\n        }\n        return err;\n      }\n      activeCount = activeCount + 1;\n\n      let result;\n      let err;\n      try {\n        result = await fn();\n      } catch (err2) {\n        err = err2;\n      } finally {\n        activeCount = activeCount - 1;\n      }\n\n      if (err) {\n        throw err;\n      }\n      return result;\n    };\n    return maxFun;\n  }\n\n  let maxFun = function() {\n    if (activeCount >= options.limit) {\n      let err = new LimitInParallelError(`Can only run this function maximum ${options.limit} times in parallel.`);\n      if (options.throwErr) {\n        throw err;\n      }\n      return err;\n    }\n    activeCount = activeCount + 1;\n\n    let result;\n    let err;\n    try {\n      result = fn();\n    } catch (err2) {\n      err = err2;\n    } finally {\n      activeCount = activeCount - 1;\n    }\n\n    if (err) {\n      throw err;\n    }\n    return result;\n  };\n  return maxFun;\n};\n\n// useful for checks like `err instanceof _.limitInParallel.Error`\nlimitInParallel.Error = LimitInParallelError;\n"]}