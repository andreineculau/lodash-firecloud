{"version":3,"sources":["../../src/mixins/deferred.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;;;AAOO,IAAI,QAAQ,GAAG,YAA+C;AACnE,MAAI,QAAmC,GAAG;AACxC,IAAA,KAAK,EAAE,SADiC,EAA1C;;;AAIA,EAAA,QAAQ,CAAC,OAAT,GAAmB,IAAI,OAAJ,CAAY,UAAS,OAAT,EAAkB,MAAlB,EAA0B;AACvD,IAAA,QAAQ,CAAC,OAAT,GAAmB,UAAS,KAAT,EAAgB;AACjC,MAAA,QAAQ,CAAC,KAAT,GAAiB,KAAjB;AACA,MAAA,QAAQ,CAAC,KAAT,GAAiB,UAAjB;AACA,MAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAJD;;AAMA,IAAA,QAAQ,CAAC,MAAT,GAAkB,UAAS,GAAT,EAAc;AAC9B,MAAA,QAAQ,CAAC,GAAT,GAAe,GAAf;AACA,MAAA,QAAQ,CAAC,KAAT,GAAiB,UAAjB;AACA,MAAA,MAAM,CAAC,GAAD,CAAN;AACD,KAJD;AAKD,GAZkB,CAAnB;;AAcA,SAAO,QAAP;AACD,CApBM,C","file":"deferred.js","sourcesContent":["import {\n  Fn\n} from '../types';\n\nexport interface Deferred<TValue> {\n\n  /**\n   * The internal promise.\n   */\n  promise: Promise<TValue>;\n\n  /**\n   * The state of the promise.\n   */\n  state: 'pending' | 'resolved' | 'rejected';\n\n  /**\n   * The resolve callback of the promise.\n   */\n  resolve: Fn<void, [TValue?]>;\n\n  /**\n   * The reject callback of the promise.\n   */\n  reject: Fn<void, [Error]>;\n\n  /**\n   * The value that the promise resolved with.\n   */\n  value?: TValue;\n\n  /**\n   * The error that the promise rejected with.\n   */\n  err?: Error;\n}\n\n/**\n * Part of `lodash-firecloud`.\n *\n * Create a Deferred object that references the promise, the resolve and reject functions.\n *\n * @returns Returns the Deferred object.\n */\nexport let deferred = function<TValue = unknown>(): Deferred<TValue> {\n  let deferred: Partial<Deferred<TValue>> = {\n    state: 'pending'\n  };\n\n  deferred.promise = new Promise(function(resolve, reject) {\n    deferred.resolve = function(value) {\n      deferred.value = value;\n      deferred.state = 'resolved';\n      resolve(value);\n    };\n\n    deferred.reject = function(err) {\n      deferred.err = err;\n      deferred.state = 'rejected';\n      reject(err);\n    };\n  });\n\n  return deferred as Deferred<TValue>;\n};\n"]}