{"version":3,"sources":["../src/once-in.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACO,IAAI,0BAAS,UAAS,EAAT,EAAa,QAAb,EAAuB;AACzC,MAAI,iBAAiB,CAArB;AACA,MAAI,gBAAJ;;AAEA,MAAI,WAAW,UAAS,GAAG,IAAZ,EAAkB;AAC/B,QAAI,MAAM,KAAK,GAAL,EAAV;AACA,QAAI,MAAM,cAAN,GAAuB,QAA3B,EAAqC;AACnC,aAAO,gBAAP;AACD;;AAED,qBAAiB,GAAjB;AACA,uBAAmB,GAAG,GAAG,IAAN,CAAnB;AACA,WAAO,gBAAP;AACD,GATD;;AAWA;AACA,MAAI,aAAa,CAAjB,EAAoB;AAClB,eAAW,UAAS,GAAG,IAAZ,EAAkB;AAC3B,aAAO,GAAG,GAAG,IAAN,CAAP;AACD,KAFD;AAGD;;AAED;AACA,WAAS,KAAT,GAAiB,YAAW;AAC1B,qBAAiB,CAAjB;AACD,GAFD;AAGA,WAAS,KAAT,GAAiB,SAAS,KAA1B;;AAEA,SAAO,QAAP;AACD,CA7BM;;kBA+BQ,M","file":"once-in.js","sourcesContent":["// \"true throttle\"\n// custom implementation of _.throttle with 'trailing': false,\n// does not allocate unnecessary timer, comparing to lodash func (which invokes debounce under the hood)\nexport let onceIn = function(fn, interval) {\n  let lastInvokeTime = 0;\n  let lastInvokeResult;\n\n  let toInvoke = function(...args) {\n    let now = Date.now();\n    if (now - lastInvokeTime < interval) {\n      return lastInvokeResult;\n    }\n\n    lastInvokeTime = now;\n    lastInvokeResult = fn(...args);\n    return lastInvokeResult;\n  };\n\n  // special case for direct call\n  if (interval === 0) {\n    toInvoke = function(...args) {\n      return fn(...args);\n    };\n  }\n\n  // _.throttle consistency\n  toInvoke.flush = function() {\n    lastInvokeTime = 0;\n  };\n  toInvoke.clear = toInvoke.flush;\n\n  return toInvoke;\n};\n\nexport default onceIn;\n"]}